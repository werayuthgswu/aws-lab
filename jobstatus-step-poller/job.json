{
    "Comment": "An example of the Amazon States Language that runs an AWS Batch job and monitors the job until it completes.",
    "StartAt": "Choice",
    "QueryLanguage": "JSONata",
    "States": {
      "Choice": {
        "Type": "Choice",
        "Choices": [
          {
            "Next": "Pass",
            "Condition": "{% $states.input.TranscationType = 'purchase' %}"
          }
        ],
        "Default": "Submit Job"
      },
      "Pass": {
        "Type": "Pass",
        "End": true
      },
      "Submit Job": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Arguments": {
          "FunctionName": "arn:aws:lambda:us-east-1:030095740776:function:purchase:$LATEST",
          "Payload": "{% $states.input %}"
        },
        "Output": "{% $merge([$states.input, $states.result.Payload]) %}",
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Wait X Seconds"
      },
      "Wait X Seconds": {
        "Type": "Wait",
        "Seconds": "{% $states.input.wait_time %}",
        "Next": "Get Job Status",
        "Output": "{% $states.input %}"
      },
      "Get Job Status": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Arguments": {
          "FunctionName": "arn:aws:lambda:us-east-1:030095740776:function:purchase:$LATEST",
          "Payload": "{% $states.input %}"
        },
        "Output": "{% $merge([$states.input, {'status': $states.result.Payload}]) %}",
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Job Complete?"
      },
      "Job Complete?": {
        "Type": "Choice",
        "Choices": [
          {
            "Next": "Job Failed",
            "Condition": "{% $states.input.status = 'FAILED' %}"
          }
        ],
        "Default": "Pass (1)"
      },
      "Pass (1)": {
        "Type": "Pass",
        "End": true
      },
      "Job Failed": {
        "Type": "Fail",
        "Cause": "AWS Batch Job Failed",
        "Error": "DescribeJob returned FAILED"
      }
    }
  }